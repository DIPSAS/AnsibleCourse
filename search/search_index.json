{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ansible course material \u00b6 Prerequisites and installation \u00b6 To be able to follow this course and do the exercises, Ansible need to be installed. The Ansible controller machines needs to run on som sort of nix system, preferably Linux or MacOS. For Windows 10, installation via Linux Subsystem is recommended. Install Ansible and the required packages (Ubuntu based): sudo apt-get update sudo apt-get install software-properties-common -y sudo apt-get install python-pip -y sudo pip install 'pywinrm>=0.1.1' sudo apt-get install --reinstall ca-certificates -y sudo apt-add-repository ppa:ansible/ansible -y sudo apt-get update sudo apt-get install ansible -y Verify with ansible --version . By using the official Ansible package repo, new versions of Ansible will be installed when running: shell sudo apt-get update sudo apt-get upgrade Clone the project \u00b6 Make sure git is installed and clone the project: git clone https://github.com/DIPSAS/AnsibleCourse.git Navigate to the folder AnsibleCourse/src , this will be the working directory. Editor \u00b6 It is highly recommended to use an editor with tree view (showing file and folder structure) feature when working with Ansible codebases. Recommendations are (pick one): VSCode with Ansible plugin. Atom with language-ansible and file-icons plugins. Alternative installation with Vagrant \u00b6 A prebuilt Virtual Machine can be used with Vagrant and the Vagrantfile in the repo. Clone the project and: vagrant up # Let Vagrant download the VM image and provision it with Ansible vagrant ssh cd /vagrant/","title":"Home"},{"location":"#ansible-course-material","text":"","title":"Ansible course material"},{"location":"#prerequisites-and-installation","text":"To be able to follow this course and do the exercises, Ansible need to be installed. The Ansible controller machines needs to run on som sort of nix system, preferably Linux or MacOS. For Windows 10, installation via Linux Subsystem is recommended. Install Ansible and the required packages (Ubuntu based): sudo apt-get update sudo apt-get install software-properties-common -y sudo apt-get install python-pip -y sudo pip install 'pywinrm>=0.1.1' sudo apt-get install --reinstall ca-certificates -y sudo apt-add-repository ppa:ansible/ansible -y sudo apt-get update sudo apt-get install ansible -y Verify with ansible --version . By using the official Ansible package repo, new versions of Ansible will be installed when running: shell sudo apt-get update sudo apt-get upgrade","title":"Prerequisites and installation"},{"location":"#clone-the-project","text":"Make sure git is installed and clone the project: git clone https://github.com/DIPSAS/AnsibleCourse.git Navigate to the folder AnsibleCourse/src , this will be the working directory.","title":"Clone the project"},{"location":"#editor","text":"It is highly recommended to use an editor with tree view (showing file and folder structure) feature when working with Ansible codebases. Recommendations are (pick one): VSCode with Ansible plugin. Atom with language-ansible and file-icons plugins.","title":"Editor"},{"location":"#alternative-installation-with-vagrant","text":"A prebuilt Virtual Machine can be used with Vagrant and the Vagrantfile in the repo. Clone the project and: vagrant up # Let Vagrant download the VM image and provision it with Ansible vagrant ssh cd /vagrant/","title":"Alternative installation with Vagrant"},{"location":"presentation/","text":"Ansible Workshop Slides 14.05.2019 \u00b6","title":"Presentation"},{"location":"presentation/#ansible-workshop-slides-14052019","text":"","title":"Ansible Workshop Slides 14.05.2019"},{"location":"resources/","text":"Resources \u00b6 Ansible module overview Ansible Windows modules Ansible quickstart cheatsheet Ansible Daily Blog Ansible for DevOps book Jeff Geerling Ansible Roles Ansible for the Windows Admin by Jeremy Murrah About Ansible, TDC 2018 Talk \u00b6","title":"Resources"},{"location":"resources/#resources","text":"Ansible module overview Ansible Windows modules Ansible quickstart cheatsheet Ansible Daily Blog Ansible for DevOps book Jeff Geerling Ansible Roles Ansible for the Windows Admin by Jeremy Murrah","title":"Resources"},{"location":"resources/#about-ansible-tdc-2018-talk","text":"","title":"About Ansible, TDC 2018 Talk"},{"location":"exercises/01-Inventory/","text":"Exercise 01: Inventory \u00b6 Inventory - Windows \u00b6 1) Add your Windows server to inventory/servers.inventory and update [windows:vars] with connection details, like username, connection method etc. hint: Connecting to a Windows Host ansible_host= might be necessary if DNS is not configured in the network. 2) Use the win_ping module to verify that a connection can be made to the server. hint: ansible [ host_group_name_in_inventory_file ] -i inventory/servers.inventory -m win_ping Inventory - Linux \u00b6 1) add your Linux server to inventory/servers.inventory and update [zookeepers:vars] with connection details, like username, connection method etc. 2) Generate SSH keypair on the Ansible controller machine. hint: link 3) Transfer the SSH public-key to the Linux machine. 4) Use the ping module to verify that a connection can be made to the server. hint: ansible [ host_group_name_in_inventory_file ] -i inventory/servers.inventory -m ping","title":"01: Inventory"},{"location":"exercises/01-Inventory/#exercise-01-inventory","text":"","title":"Exercise 01: Inventory"},{"location":"exercises/01-Inventory/#inventory-windows","text":"1) Add your Windows server to inventory/servers.inventory and update [windows:vars] with connection details, like username, connection method etc. hint: Connecting to a Windows Host ansible_host= might be necessary if DNS is not configured in the network. 2) Use the win_ping module to verify that a connection can be made to the server. hint: ansible [ host_group_name_in_inventory_file ] -i inventory/servers.inventory -m win_ping","title":"Inventory - Windows"},{"location":"exercises/01-Inventory/#inventory-linux","text":"1) add your Linux server to inventory/servers.inventory and update [zookeepers:vars] with connection details, like username, connection method etc. 2) Generate SSH keypair on the Ansible controller machine. hint: link 3) Transfer the SSH public-key to the Linux machine. 4) Use the ping module to verify that a connection can be made to the server. hint: ansible [ host_group_name_in_inventory_file ] -i inventory/servers.inventory -m ping","title":"Inventory - Linux"},{"location":"exercises/02-FirstPlaybook/","text":"Exercise 02: Playbook and simple tasks \u00b6 My first Playbook \u00b6 1) Create a file called Appserver.yaml . 2) Add a task for running Windows Update with the win_update module, targeting the windows hostgroup. Note: we only want security updates installed. hint: win_update module 3) Add a new task to the playbook for rebooting the server with the win_reboot module only if the installed windows update required it . 4) Run the playbook against the inventory file. hint: ansible-playbook -i [ path/to/file.inventory ] Appserver.yaml --verbose","title":"02: First Playbook"},{"location":"exercises/02-FirstPlaybook/#exercise-02-playbook-and-simple-tasks","text":"","title":"Exercise 02: Playbook and simple tasks"},{"location":"exercises/02-FirstPlaybook/#my-first-playbook","text":"1) Create a file called Appserver.yaml . 2) Add a task for running Windows Update with the win_update module, targeting the windows hostgroup. Note: we only want security updates installed. hint: win_update module 3) Add a new task to the playbook for rebooting the server with the win_reboot module only if the installed windows update required it . 4) Run the playbook against the inventory file. hint: ansible-playbook -i [ path/to/file.inventory ] Appserver.yaml --verbose","title":"My first Playbook"},{"location":"exercises/03-Roles/","text":"Exercise 03: Roles and variables \u00b6 Roles, variables and iterators \u00b6 1) Create a role for the windows update tasks from exercise 2 and change the playbook to use this role (remove the tasks: list and replace it with roles: ) 2) Create a new role called IIS . This role will install IIS features with the win_feature module. hint: win_feature module 3) Create a defaults/main.yaml file and add a variable called IISFeatures containing the following features: Web-Server Web-Common-Http Web-App-Dev Web-Net-Ext45 Web-Asp-Net45 hint: yaml lists are on the following format: list : - item 1 - item 2 4) Use with_items: to make win_feature install the list of IIS features. 5) Add the IIS role to the playbook and run.","title":"03: Roles"},{"location":"exercises/03-Roles/#exercise-03-roles-and-variables","text":"","title":"Exercise 03: Roles and variables"},{"location":"exercises/03-Roles/#roles-variables-and-iterators","text":"1) Create a role for the windows update tasks from exercise 2 and change the playbook to use this role (remove the tasks: list and replace it with roles: ) 2) Create a new role called IIS . This role will install IIS features with the win_feature module. hint: win_feature module 3) Create a defaults/main.yaml file and add a variable called IISFeatures containing the following features: Web-Server Web-Common-Http Web-App-Dev Web-Net-Ext45 Web-Asp-Net45 hint: yaml lists are on the following format: list : - item 1 - item 2 4) Use with_items: to make win_feature install the list of IIS features. 5) Add the IIS role to the playbook and run.","title":"Roles, variables and iterators"},{"location":"exercises/04-TemplatesHandlers/","text":"Exercise 04: Templates, handlers and files \u00b6 Roles with templates and handlers \u00b6 1) Add the Stratos role to the playbook. Update the role with a task for copying log4net.config to the install-location of Stratos (variable stratosInstallfolder ). hint: win_template 2) In the defaults/main.yaml , create a variable logLevel with the value info and introduce this variable in templates/log4net.config => <level value=\"Debug\" /> (replace Debug with this variable). 3) Create a handler that restarts the StratosService service if: A new version of Stratos is installed The log4net.config file changes. hint: win_service 4) Run the playbook, observe the handler restarting the service and verify it from http://server-name:1337/api/chocoPackages . 5) Bonus exercise: Use win_uri to verify HTTP 200 from the service after installation.","title":"04: Templates and handlers"},{"location":"exercises/04-TemplatesHandlers/#exercise-04-templates-handlers-and-files","text":"","title":"Exercise 04: Templates, handlers and files"},{"location":"exercises/04-TemplatesHandlers/#roles-with-templates-and-handlers","text":"1) Add the Stratos role to the playbook. Update the role with a task for copying log4net.config to the install-location of Stratos (variable stratosInstallfolder ). hint: win_template 2) In the defaults/main.yaml , create a variable logLevel with the value info and introduce this variable in templates/log4net.config => <level value=\"Debug\" /> (replace Debug with this variable). 3) Create a handler that restarts the StratosService service if: A new version of Stratos is installed The log4net.config file changes. hint: win_service 4) Run the playbook, observe the handler restarting the service and verify it from http://server-name:1337/api/chocoPackages . 5) Bonus exercise: Use win_uri to verify HTTP 200 from the service after installation.","title":"Roles with  templates and handlers"},{"location":"exercises/05-Vault/","text":"Exercise 05: Ansible Vault and encrypted secrets \u00b6 Roles with encrypted variables, variable scoping \u00b6 1) Create a role named LocalUsers with with defaults/main.yaml and tasks/main.yaml . 2) In the defaults/main.yaml , create a dictionary variable called users with usernames and password properties. Use Ansible Vault to encrypt the password. hint: ansible-vault encrypt_string [ my-text-string ] --ask-vault-pass hint 2: link 3) Use win_user and create some users and give them remote desktop permissions (use the usernames and passwords from the previous bullet) to create these. hint: groups: Remote Desktop Users , link hint2: Avoid leaking passwords in clear text with no_log: true 4) Log on to the server with one of the new users. 5) Override the users variable in group_vars/windows.yaml with new usernames and passwords.","title":"05: Vault and encrypted secrets"},{"location":"exercises/05-Vault/#exercise-05-ansible-vault-and-encrypted-secrets","text":"","title":"Exercise 05: Ansible Vault and encrypted secrets"},{"location":"exercises/05-Vault/#roles-with-encrypted-variables-variable-scoping","text":"1) Create a role named LocalUsers with with defaults/main.yaml and tasks/main.yaml . 2) In the defaults/main.yaml , create a dictionary variable called users with usernames and password properties. Use Ansible Vault to encrypt the password. hint: ansible-vault encrypt_string [ my-text-string ] --ask-vault-pass hint 2: link 3) Use win_user and create some users and give them remote desktop permissions (use the usernames and passwords from the previous bullet) to create these. hint: groups: Remote Desktop Users , link hint2: Avoid leaking passwords in clear text with no_log: true 4) Log on to the server with one of the new users. 5) Override the users variable in group_vars/windows.yaml with new usernames and passwords.","title":"Roles with encrypted variables, variable scoping"},{"location":"exercises/06-ConfigurationServer/","text":"Exercise 06: Installation of DIPS Configuration Server \u00b6 DIPS Configuration Server \u00b6 In this exercise the goal is to install DIPS Configuration Server on the Windows box and configure it to reach the Linux (Zookeeper) box in the same inventory. 1) Create a role named DotnetFramework462 with a task that installs Dotnet Framework 4.6.2 , a requirement for DIPS Configuration Server. Add the role to Appserver.yaml . hint: Package URL . The package requires a reboot, so have win_update handy. 2) Update the role ConfigurationServer with tasks/main.yaml and write the task for installing the chocolatey package for DIPS Configuration Server, using the started variable set in defaults/main.yaml . 3) Write a task that verifies the health-endpoint for the installed DIPS Configuration Server. 4) Add the role ConfigurationServer to Appserver.yaml","title":"06: DIPS Configuration Server "},{"location":"exercises/06-ConfigurationServer/#exercise-06-installation-of-dips-configuration-server","text":"","title":"Exercise 06: Installation of DIPS Configuration Server"},{"location":"exercises/06-ConfigurationServer/#dips-configuration-server","text":"In this exercise the goal is to install DIPS Configuration Server on the Windows box and configure it to reach the Linux (Zookeeper) box in the same inventory. 1) Create a role named DotnetFramework462 with a task that installs Dotnet Framework 4.6.2 , a requirement for DIPS Configuration Server. Add the role to Appserver.yaml . hint: Package URL . The package requires a reboot, so have win_update handy. 2) Update the role ConfigurationServer with tasks/main.yaml and write the task for installing the chocolatey package for DIPS Configuration Server, using the started variable set in defaults/main.yaml . 3) Write a task that verifies the health-endpoint for the installed DIPS Configuration Server. 4) Add the role ConfigurationServer to Appserver.yaml","title":"DIPS Configuration Server"}]}